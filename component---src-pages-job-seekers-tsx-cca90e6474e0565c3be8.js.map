{"version":3,"sources":["webpack:///./src/pages/job-seekers.tsx"],"names":["useState","seekers","setSeekers","isLoading","setIsLoading","useEffect","getData","sheetId","o","forEach","e","title","entries","className","map","j","i","s","fromEntries","key","approved","firstname","lastname","typeofworkcontractorparttimefulltimegig","describeyourskills","skills","split","skill","id","jobtitle","href","emailaddress","phonenumber","linkedinorportfoliourl","target","resumelink","date","timestamp"],"mappings":"6RA8Ge,qBAAM,MACWA,mBAAkB,IAAzCC,EADY,KACHC,EADG,OAEeF,oBAAS,GAApCG,EAFY,KAEDC,EAFC,KAenB,OAXAC,qBAAU,WACRD,GAAa,GACbE,YAAiBC,KAAS,SAAAC,GACxBA,EAAEC,SAAQ,SAAAC,GACQ,eAAZA,EAAEC,OACJT,EAAWQ,EAAEE,YAGjBR,GAAa,QAEd,IAED,YAAC,IAAD,KACE,YAAC,IAAD,CAAMS,UAAU,aACd,YAAC,IAAD,CAAWA,UAAU,eAClBV,EAAY,YAAC,IAAD,MAAaF,EAAQa,KAAI,SAACC,EAAGC,GAAJ,OA1G1BC,EA0GiDC,YAAYH,GA1GlDI,EA0GsDH,EAzGpFC,EAAEG,SACD,mBAAKP,UAAU,uBAAuBM,IAAKA,GACzC,mBAAKN,UAAU,eACb,mBAAKA,UAAU,OACb,mBAAKA,UAAU,YACb,kBAAIA,UAAU,aACXI,EAAEI,UADL,IACiBJ,EAAEK,WAGrB,mBAAKT,UAAU,YACZI,EAAEM,wCACD,mBAAKV,UAAU,sBACb,0CAEE,oBAAMA,UAAU,YAAYI,EAAEM,2CAIlC,MAKR,mBAAKV,UAAU,aACb,mBAAKA,UAAU,OACb,mBAAKA,UAAU,YACb,mBAAKA,UAAU,aACb,iBAAGA,UAAU,cAAb,aACA,iBAAGA,UAAU,IAAII,EAAEO,oBACnB,iBAAGX,UAAU,cAAb,UACA,kBAAIA,UAAU,UACXI,EAAEQ,OAAOC,MAAM,KAAKZ,KAAI,SAACa,EAAOX,GAAR,OACvB,kBAAIG,IAAKH,EAAGY,GAAI,SAAWZ,EAAGH,UAAW,SACtCc,OAIP,iBAAGd,UAAU,qBAAb,qBAXF,IAW0DI,EAAEY,WAG9D,mBAAKhB,UAAU,YACb,kBAAIA,UAAU,SACZ,kBAAIA,UAAU,SACZ,iBAAGiB,KAAM,UAAYb,EAAEc,aAAclB,UAAU,uBAA/C,UAIDI,EAAEe,YACD,kBAAInB,UAAU,SACZ,iBAAGiB,KAAM,OAASb,EAAEe,YAAanB,UAAU,uBAA3C,SAKF,GAEDI,EAAEgB,uBACD,kBAAIpB,UAAU,aACZ,iBAAGiB,KAAMb,EAAEgB,uBAAwBC,OAAO,SAASrB,UAAU,oBAA7D,yBAKF,GAEDI,EAAEkB,WACD,kBAAItB,UAAU,UACZ,iBAAGiB,KAAMb,EAAEkB,WAAYD,OAAO,SAASrB,UAAU,uBAAjD,WAKF,OAMV,mBAAKA,UAAU,0BACb,mCACS,YAAC,IAAD,CAASuB,KAAMnB,EAAEoB,eAhFlB,KADK,IAACpB,EAAWE,U","file":"component---src-pages-job-seekers-tsx-cca90e6474e0565c3be8.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Gravatar from 'react-gravatar'\nimport { Phone, Mail, Link, FileText } from 'react-feather'\nimport TimeAgo from 'react-timeago'\n\nimport Page from '../components/Page'\nimport Container from '../components/Container'\nimport IndexLayout from '../layouts'\nimport { sheetId } from '../constants'\nimport { getData } from '../getSheets'\nimport { fromEntries } from '../utils'\nimport { Loader } from '../components/Loader'\nimport { Seekers, Seeker } from '../models'\n\nimport '../styles/job-seeker.scss'\n\nconst colors = {\n  opts: ['primary', 'secondary', 'success', 'warning', 'danger', 'info', 'light'],\n  pick: i => {\n    return colors.opts[Math.floor(Math.random() * colors.opts.length)]\n  },\n}\n\nconst renderSeeker = (s: Seeker, key: number) =>\n  !s.approved ? null : (\n    <div className=\"card mb-4 job-seeker\" key={key}>\n      <div className=\"card-header\">\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <h4 className=\"name mb-0\">\n              {s.firstname} {s.lastname}\n            </h4>\n          </div>\n          <div className=\"col-md-3\">\n            {s.typeofworkcontractorparttimefulltimegig ? (\n              <div className=\"seeking text-right\">\n                <strong>\n                  Type of Work:\n                  <span className=\"job-type\">{s.typeofworkcontractorparttimefulltimegig}</span>\n                </strong>\n              </div>\n            ) : (\n              ''\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <div className=\"card-text\">\n              <p className=\"card-title\">Overview:</p>\n              <p className=\"\">{s.describeyourskills}</p>\n              <p className=\"card-title\">Skills</p>\n              <ul className=\"skills\">\n                {s.skills.split(',').map((skill, i) => (\n                  <li key={i} id={'skill-' + i} className={'skill'}>\n                    {skill}\n                  </li>\n                ))}\n              </ul>\n              <p className=\"card-title inline\">Former Job Title:</p> {s.jobtitle}\n            </div>\n          </div>\n          <div className=\"col-md-3\">\n            <ul className=\"links\">\n              <li className=\"email\">\n                <a href={'mailto:' + s.emailaddress} className=\"badge badge-primary\">\n                  Email\n                </a>\n              </li>\n              {s.phonenumber ? (\n                <li className=\"phone\">\n                  <a href={'tel:' + s.phonenumber} className=\"badge badge-success\">\n                    Call\n                  </a>\n                </li>\n              ) : (\n                ''\n              )}\n              {s.linkedinorportfoliourl ? (\n                <li className=\"portfolio\">\n                  <a href={s.linkedinorportfoliourl} target=\"_blank\" className=\"badge badge-info\">\n                    LinkedIn / Portfolio\n                  </a>\n                </li>\n              ) : (\n                ''\n              )}\n              {s.resumelink ? (\n                <li className=\"resume\">\n                  <a href={s.resumelink} target=\"_blank\" className=\"badge badge-warning\">\n                    Resume\n                  </a>\n                </li>\n              ) : (\n                ''\n              )}\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div className=\"card-footer text-muted\">\n        <small>\n          Joined <TimeAgo date={s.timestamp} />\n        </small>\n      </div>\n    </div>\n  )\n\nexport default () => {\n  const [seekers, setSeekers] = useState<Seekers>([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    setIsLoading(true)\n    getData<Seekers>(sheetId, o => {\n      o.forEach(e => {\n        if (e.title === 'candidates') {\n          setSeekers(e.entries)\n        }\n      })\n      setIsLoading(false)\n    })\n  }, [])\n  return (\n    <IndexLayout>\n      <Page className=\"container\">\n        <Container className=\"job-seekers\">\n          {isLoading ? <Loader /> : seekers.map((j, i) => renderSeeker(fromEntries(j), i))}\n        </Container>\n      </Page>\n    </IndexLayout>\n  )\n}\n"],"sourceRoot":""}