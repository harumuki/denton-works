{"version":3,"sources":["webpack:///./src/pages/jobs.tsx"],"names":["useState","jobs","setJobs","isLoading","setIsLoading","useEffect","getData","sheetId","o","forEach","e","title","entries","map","j","i","key","className","timestamp","jobcategory","jobtitle","typeofwork","jobdescription","href","emailaddress","jobrate","phonenumber","jobpostlink","target","companyname","dentonchamberofcommercemember","src","alt","websiteurl","replace","address","renderJob","fromEntries"],"mappings":"wQA6Fe,qBAAM,MACKA,mBAAe,IAAhCC,EADY,KACNC,EADM,OAEeF,oBAAS,GAApCG,EAFY,KAEDC,EAFC,KAkBnB,OAdAC,qBAAU,WACRD,GAAa,GAEbE,YAAQC,KAAS,SAAAC,GACfA,EAAEC,SAAQ,SAAAC,GACQ,SAAZA,EAAEC,OACJT,EAAQQ,EAAEE,YAIdR,GAAa,QAEd,IAGD,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACGD,EACC,YAAC,IAAD,MAEAF,EAAKY,KAAI,SAACC,EAAGC,GAAJ,OA3GH,SAACD,EAAQE,GAAT,OAChB,mBAAKA,IAAKA,EAAKC,UAAW,WAAaD,GACrC,mBAAKC,UAAU,OACb,mBAAKA,UAAU,QAAf,SAA6BH,EAAEI,UAA/B,QACA,mBAAKD,UAAU,YAAYH,EAAEK,cAE/B,mBAAKF,UAAU,UACb,mBAAKA,UAAU,YACb,kBAAIA,UAAU,SACXH,EAAEM,SACH,oBAAMH,UAAU,QAAQH,EAAEO,aAE5B,mBAAKJ,UAAU,eAAeH,EAAEQ,iBAElC,mBAAKL,UAAU,aACb,mBAAKA,UAAU,wBACb,iBAAGM,KAAM,UAAYT,EAAEU,aAAe,YAAcV,EAAEM,SAAUH,UAAU,OAA1E,YAIF,mBAAKA,UAAU,qBACb,oBAAMA,UAAU,QAAQH,EAAEW,UAE5B,mBAAKR,UAAU,kBACZH,EAAEY,YACD,iBAAGT,UAAU,sBAAsBM,KAAM,OAAST,EAAEY,aAApD,QAIA,GAEDZ,EAAEa,YACD,iBAAGJ,KAAMT,EAAEa,YAAaC,OAAO,SAASX,UAAU,0BAAlD,eAIA,MAKR,mBAAKA,UAAU,UACb,mBAAKA,UAAU,WACb,mBAAKA,UAAU,QACZH,EAAEe,YACFf,EAAEgB,+BACD,mBAAKb,UAAU,OACb,mBACEc,IAAI,0FACJC,IAAI,oCACJrB,MAAM,wCAKd,mBAAKM,UAAU,SACZH,EAAEmB,WACD,iBAAGL,OAAO,SAASL,KAAMT,EAAEmB,YAA3B,MAIA,KAIN,mBAAKhB,UAAU,WACb,iBACEW,OAAO,SACPL,KACE,mDACAT,EAAEe,YAAYK,QAAQ,MAAO,KAC7B,IACApB,EAAEqB,QAAQD,QAAQ,MAAO,MAG1BpB,EAAEqB,YAgCkBC,CAAUC,YAAYvB,GAAoBC,W","file":"component---src-pages-jobs-tsx-c3f4f33db88d0bf2540c.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport Page from '../components/Page'\nimport Container from '../components/Container'\nimport IndexLayout from '../layouts'\nimport { sheetId } from '../constants'\nimport { getData } from '../getSheets'\nimport { fromEntries } from '../utils'\nimport { Loader } from '../components/Loader'\nimport '../styles/job.scss'\n\nconst renderJob = (j: Job, key: number) => (\n  <div key={key} className={'job job-' + key}>\n    <div className=\"top\">\n      <div className=\"time\">added {j.timestamp} ago</div>\n      <div className=\"category\">{j.jobcategory}</div>\n    </div>\n    <div className=\"middle\">\n      <div className=\"col-left\">\n        <h4 className=\"title\">\n          {j.jobtitle}\n          <span className=\"type\">{j.typeofwork}</span>\n        </h4>\n        <div className=\"description\">{j.jobdescription}</div>\n      </div>\n      <div className=\"col-right\">\n        <div className=\"contact-wrapper row1\">\n          <a href={'mailto:' + j.emailaddress + '?subject=' + j.jobtitle} className=\"btn\">\n            Contact\n          </a>\n        </div>\n        <div className=\"rate-wrapper row1\">\n          <span className=\"rate\">{j.jobrate}</span>\n        </div>\n        <div className=\"alt-icons row2\">\n          {j.phonenumber ? (\n            <a className=\"phone btn secondary\" href={'tel:' + j.phonenumber}>\n              Call\n            </a>\n          ) : (\n            ''\n          )}\n          {j.jobpostlink ? (\n            <a href={j.jobpostlink} target=\"_blank\" className=\"post-link btn tertiary\">\n              Online Link\n            </a>\n          ) : (\n            ''\n          )}\n        </div>\n      </div>\n    </div>\n    <div className=\"bottom\">\n      <div className=\"company\">\n        <div className=\"name\">\n          {j.companyname}\n          {j.dentonchamberofcommercemember && (\n            <div className=\"coc\">\n              <img\n                src=\"https://cdn.jsdelivr.net/gh/techmilldenton/denton-works@master/src/images/dcoc-logo.svg\"\n                alt=\"Denton Chamber of Commerce Member\"\n                title=\"Denton Chamber of Commerce Member\"\n              ></img>\n            </div>\n          )}\n        </div>\n        <div className=\"links\">\n          {j.websiteurl ? (\n            <a target=\"_blank\" href={j.websiteurl}>\n              ðŸ”—\n            </a>\n          ) : (\n            ''\n          )}\n        </div>\n      </div>\n      <div className=\"address\">\n        <a\n          target=\"_blank\"\n          href={\n            'https://www.google.com/maps/search/?api=1&query=' +\n            j.companyname.replace(/\\s/g, '+') +\n            '+' +\n            j.address.replace(/\\s/g, '+')\n          }\n        >\n          {j.address}\n        </a>\n      </div>\n    </div>\n  </div>\n)\n\nexport default () => {\n  const [jobs, setJobs] = useState<Jobs>([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    setIsLoading(true)\n\n    getData(sheetId, o => {\n      o.forEach(e => {\n        if (e.title === 'jobs') {\n          setJobs(e.entries)\n        }\n      })\n\n      setIsLoading(false)\n    })\n  }, [])\n\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          {isLoading ? (\n            <Loader />\n          ) : (\n            jobs.map((j, i) => renderJob(fromEntries(j as never) as Job, i))\n          )}\n        </Container>\n      </Page>\n    </IndexLayout>\n  )\n}\n\ntype Job = {\n  id: string\n  timestamp: string\n  companyname: string\n  address: string\n  websiteurl: string\n  dentonchamberofcommercemember: string\n  emailaddress: string\n  phonenumber: string\n  jobtitle: string\n  jobdescription: string\n  typeofwork: string\n  jobcategory: string\n  jobrate: string\n  jobpostlink: string\n}\n\ntype Jobs = Array<Array<[string, string]>>\n"],"sourceRoot":""}